1 - posts icine forms.py yarat

2 - forms.py icine elave ele:

from django import forms
from .models import Comment


class CommentForm(forms.ModelForm):
    class Meta:
        model = Comment
        fields = ('name', 'body')

    # overriding default form setting and adding bootstrap class
    def __init__(self, *args, **kwargs):
        super(CommentForm, self).__init__(*args, **kwargs)
        self.fields['name'].widget.attrs = {'placeholder': 'Enter name', 'class': 'form-control'}
        self.fields['body'].widget.attrs = {'placeholder': 'Comment here...', 'class': 'form-control', 'rows': '5'}

3 - models.py elave ele :

class Comment(models.Model):
    post = models.ForeignKey(Post, on_delete=models.CASCADE, related_name="comments")
    name = models.CharField(max_length=50)
    parent = models.ForeignKey("self", null=True, blank=True, on_delete=models.CASCADE)
    body = models.TextField()

    created = models.DateTimeField(auto_now_add=True)
    updated = models.DateTimeField(auto_now=True)
    active = models.BooleanField(default=True)

    class Meta:
        ordering = ('created',)

    def __str__(self):
        return self.name

    def get_comments(self):
        return Comment.objects.filter(parent=self).filter(active=True)

4 - views.py post bele gorunmelidi : 

def post (request,slug):
    post = Post.objects.get(slug = slug)
    latest = Post.objects.order_by('-timestamp')[:3]
    comments = post.comments.filter(active=True)
    new_comment = None
    comment_form = CommentForm()


    comment_form = CommentForm(data=request.POST)
    if comment_form.is_valid():
        new_comment = comment_form.save(commit=False)
        new_comment.post = post
        new_comment.save()
        comment_form = CommentForm()

    context = {
        'post': post,
        'latest': latest,
        'comments': comments,
        'comment_form': comment_form
    }
    return render(request, 'post.html', context)

5 - post.html de author altina divider den sonra elave ele :


<hr/>
        <h3>Add Comment</h3>
        <form method="post" action="">
            {% csrf_token %}
            {{ comment_form.as_p }}
            <button type="submit" class="btn btn-primary">Comment</button>
        </form>

        {% with comments.count as total_comments %}
            <h3 class="mt-5">
                {{ total_comments }} comment{{ total_comments|pluralize }}
            </h3>
        {% endwith %}
        {% if not post.comments.all %}
            No comments yet

        {% else %}
            {% for comment in post.get_comments %}
                {% include 'comment.html' with comment=comment %}
            {% endfor %}
        {% endif %}
	</div>

6 - admin.py elave ele : 

@admin.register(Comment)
class CommentAdmin(admin.ModelAdmin):
    list_display=('name', 'post', 'created', 'active')
    list_filter = ('active', 'created', 'updated')
    search_fields = ('name', 'body')


7 - templates de comment.html yarat ve icine elave et :

<div class="border-0 border-start border-2 ps-2" id="{{comment.id}}">

        <div class="mt-3">
            <strong>{{comment.name}}</strong>
            {% if  comment.parent.name%} to <strong>{{comment.parent.name}}</strong>{% endif %}
            <small class="text-muted">On {{ comment.created.date }}</small>
        </div>
        <div class="border p-2 rounded">
            <p>{{comment.body}}</p>
            <button class="btn btn-primary btn-sm" onclick="handleReply({{comment.id}})">Reply</button>

            <div id="reply-form-container-{{comment.id}}" style="display:none">

               
            </div>
        </div>
        {% for comment in comment.get_comments %}
            {% include 'comment.html' with comment=comment %}
        {% endfor %}
</div>



8 - models de post un altina elave ele 

def get_comments(self):
        return self.comments.filter(parent=None).filter(active=True)